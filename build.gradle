apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'

allprojects {
	sourceCompatibility = 1.6
	targetCompatibility = 1.6

        sourceSets {
            main {
                groovy {
                    srcDirs "src"
				}
				resources {
					srcDirs "src", "scripts"
				}
            }
			test {
				java {
					srcDirs "src"
				}
				groovy {
					srcDirs "src"
				}
			}
        }
	
	compileGroovy.groovyOptions.fork = false
	compileTestGroovy.groovyOptions.fork = false
}


configurations {
    testng
}

eclipse {
	classpath {
		defaultOutputDir = file('build')	
	}
	project {
		file {
			whenMerged { project ->
				if ( !project.buildCommands[0].name.contains('PyDev') ) {
					project.buildCommands = project.buildCommands.reverse()
				}
			}
		}

		natures 'org.python.pydev.pythonNature'
		buildCommand 'org.python.pydev.PyDevBuilder'
	}
}

repositories {
    mavenCentral()
    [ 'https://repository.jboss.org/nexus/content/repositories/thirdparty-uploads',
      'http://clojars.org/repo',
      'http://download.java.net/maven/2/',
      'http://repository.codehaus.org',
      'http://snapshots.repository.codehaus.org' ].each { repo ->
        maven {
            url repo
        }
    }
}

dependencies {
    def httpBuilderVersion = '0.5.2'
    if ( System.properties['httpbuilder.version'] ) {
        httpBuilderVersion = System.properties['httpbuilder.version']
    }

    
	testCompile 'org.testng:testng:6.8',
		'xmlunit:xmlunit:1.0'

    testRuntime('org.uncommons:reportng:1.1.3') {
        exclude group: 'org.testng', module: 'testng'
    }

	//testRuntime 'org.slf4j:slf4j-log4j12:1.6.4'
	testRuntime 'org.slf4j:slf4j-jdk14:1.6.4'
	compile 'org.testng:testng:6.8',
        'com.redhat.qe:ssh-tools:1.0.0',
        'com.redhat.qe:extended-selenium:1.0.3.3',
        'com.redhat.qe:logging-testscript:1.0.2',
        'com.redhat.qe:testng-listeners:1.0.0',
        'com.redhat.qe:assertions:1.0.2',
        'com.redhat.qe:httpclient-tools:1.0.0',
	'org.json:json:20090211',
        'org.yaml:snakeyaml:1.10',
		'com.icegreen:greenmail:1.3.1b'
    compile("org.codehaus.groovy.modules.http-builder:http-builder:${httpBuilderVersion}") {
        exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
	groovy 'org.codehaus.groovy:groovy:1.8.8'
    testng 'org.testng:testng:6.8',
           'org.yaml:snakeyaml:1.10',
           'com.redhat.qe:testng-listeners:1.0.0'
}

task printClasspath << {
    println configurations.runtime.asPath
}

test {
	useTestNG()
	systemProperties = System.properties
	if ( systemProperties['testng.suites'] ) {
	    options.suites(systemProperties['testng.suites'])
        }
	options {
//	    listeners << 'com.redhat.qe.auto.bugzilla.BugzillaTestNGListener'
	    listeners << 'org.uncommons.reportng.HTMLReporter'
	    listeners << 'org.uncommons.reportng.JUnitXMLReporter'
	    listeners << 'com.redhat.qe.auto.testng.TestNGListener'
        }
	scanForTestClasses = false
        if ( systemProperties['ignore.failures'] ) {
	    ignoreFailures = systemProperties['ignore.failures']
        }
	testLogging.showStandardStreams = true
}

task printProps << {
	println System.properties
}

task runTestng(dependsOn: 'testClasses') << {
    def systemProperties = System.properties
	//println System.properties
    // Defaults to $WORKSPACE, or if that's null, cwd
    //def workspace = System.getProperty("workspace.dir", System.getenv("WORKSPACE") ?: System.properties["user.dir"])
    def workspace = "./"
    //def testngProjectDir = System.getProperty("testng.project.dir", "automatjon/jon")
    def testngProjectDir = "./"
    def automationDir = "."
    System.properties["automation.dir"] = automationDir.toString()
    def outputDir = System.getProperty("testng.outputdir", "${automationDir}/test-output")
    def xmlSuite = System.properties["testng.suites"]
    
    // Comma-separated list of listeners. If this property doesn't exist, will choose some defaults
    def testngListeners = System.properties["testng.listeners"]
    if (!testngListeners) {
        testngListeners = "com.redhat.qe.auto.testng.ScreenShotTestNGListener"
    }
    ant.taskdef( resource: 'testngtasks', classpath: configurations.testng.asPath )
    ant.testng( classpath: sourceSets.test.runtimeClasspath.asPath, outputdir: outputDir, listeners: testngListeners) {
		systemProperties.each {String key, String value ->
			if (! key.startsWith("java.")) {
				logger.info("Adding system property '" + key + ": " + value+ "'")
				sysproperty(key: key, value: value)
			}	
		}
        xmlfileset(dir: 'src', includes: "**/${xmlSuite}")
    }
}

tasks.addRule("Pattern: suite<SuiteName>: Runs a test suite via xml in classpath") { String taskName ->
	final String prefix = "suite"
	if ( taskName.startsWith(prefix) && taskName.length() > prefix.length() ) {
		logger.info("SuiteExecution: $taskName matches pattern")

		// create a dummy task for the task name specified on the command line
		Task dummyTask = task(taskName)

		// remove prefix from the specified task name	
		def suiteName = taskName - prefix

		// define an include that supports the specified naming pattern, inc. camel-case notation
		def camelCaseTaskName = suiteName[0] + suiteName.substring(1).collect() { it == it.toUpperCase() ? "*$it" : it }.join("")
		def suiteIncludes = WrapUtil.toSet(String.format("**/%s.xml", camelCaseTaskName))
		def suiteFiles = fileTree(dir: 'src', includes: suiteIncludes )
		suiteFiles.each { File file ->
			logger.info("SuiteExecution: suiteFile: ${file}")
		}

		// make all Test tasks a dependency of the dummy task and reset the includes
		tasks.withType(Test) { Task suiteTask ->
			logger.info("SuiteExecution: apply include pattern to Suite task <$suiteTask.name>")
			suiteTask.useTestNG()
			suiteTask.options.suites(suiteFiles.asType(File[]))
			dummyTask.dependsOn suiteTask
		}
	}
}

jar {
}

task writeNewPom << {
	pom.writeTo("$buildDir/newpom.xml") 
}
